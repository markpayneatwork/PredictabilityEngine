% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Config_class_and_methods.r
\name{show,PredEng.config-method}
\alias{show,PredEng.config-method}
\title{========================================================================
========================================================================
#' Merge the regions of interest stored in the config object into one
#' 
#' 
setMethod("merge",signature(x="project.config",y="missing"),
          function(x,y,..){
            #Merge Regions of interest
            poly.ROIs <- lapply(x@indicators,slot,"poly.ROI")
            ext.ROIs <- lapply(poly.ROIs,extent)
            if(length(ext.ROIs)>1) {
              ROI <- do.call(raster::merge,unname(ext.ROIs))
            } else {
              ROI <- ext.ROIs[[1]]
            }
            return(ROI)
          })
#' Visualise project region of interest
#' @export
setMethod("plot",signature(x="project.config",y="missing"),
          function(x,y,...) {
            require(maps)
            #Try to plot a map as background first
            err <- try(map("world",xlim=x@ROI[1:2],ylim=x@ROI[3:4],
                           fill=TRUE,col="black"),silent=TRUE)
            if(is(err,"try-error")) {
              plot(x@ROI,lwd=2,col="grey",...)
            } else {
              plot(x@ROI,lwd=2,col="grey",add=TRUE,...)
            }
            #Add individual areas
            for(i in seq(x@indicators)) {
              plot(x@indicators[[i]]@poly.ROI,border=i,add=TRUE)
            }
          })}
\usage{
\S4method{show}{PredEng.config}(object)
}
\description{
========================================================================
========================================================================
#' Merge the regions of interest stored in the config object into one
#' 
#' 
setMethod("merge",signature(x="project.config",y="missing"),
          function(x,y,..){
            #Merge Regions of interest
            poly.ROIs <- lapply(x@indicators,slot,"poly.ROI")
            ext.ROIs <- lapply(poly.ROIs,extent)
            if(length(ext.ROIs)>1) {
              ROI <- do.call(raster::merge,unname(ext.ROIs))
            } else {
              ROI <- ext.ROIs[[1]]
            }
            return(ROI)
          })
#' Visualise project region of interest
#' @export
setMethod("plot",signature(x="project.config",y="missing"),
          function(x,y,...) {
            require(maps)
            #Try to plot a map as background first
            err <- try(map("world",xlim=x@ROI[1:2],ylim=x@ROI[3:4],
                           fill=TRUE,col="black"),silent=TRUE)
            if(is(err,"try-error")) {
              plot(x@ROI,lwd=2,col="grey",...)
            } else {
              plot(x@ROI,lwd=2,col="grey",add=TRUE,...)
            }
            #Add individual areas
            for(i in seq(x@indicators)) {
              plot(x@indicators[[i]]@poly.ROI,border=i,add=TRUE)
            }
          })
}
